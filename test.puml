@startuml
class GameUI {
    -func _ready()
    +func on_Game_spawn(team_choices)
}

class AvatarSpawner {
    +var unique_counter := -1
    +func get_unique_name()
}

class Hiding {
    +var team
    +var seen_by_teams := [0, 0, 0]
    +var seen_by_num = seen_by_teams[0] + seen_by_teams[1] + seen_by_teams[2]
    {abstract} +func on_seen_by(entity)
    {abstract} +func sync_opponent(opponent_team)
    {abstract} +func on_unseen_by(entity)
    {abstract} +func unsync_opponent(opponent_team)
    +func should_sync_to_client(client, only_for_teammates := false)
}

class Ground {
    -func _ready()
    +func on_mouse_entered()
    +func on_mouse_exited()
    -func _input_event(viewport: Object, event: InputEvent, shape_idx: int)
}

class SelectableAvatar {
    +var under_cursor := false
    +var owner_team
    {abstract} -func _ready()
    +func on_mouse_input(viewport: Object, event: InputEvent, shape_idx: int)
    +func on_mouse_entered()
    +func on_mouse_exited()
    +func destroy()
    +func should_disable_light()
    +func should_change_color()
}

class CameraController {
    -var _zoom_level := 1.0 setget _set_zoom_level
    +var tween: Tween
    -func _ready()
    -func _set_zoom_level(value: float) -> void
    -func _unhandled_input(event)
}

class SpawnManager {
    +var buildings_prefab: PackedScene
    {field} +var monster_spawn = get_node(monster_spawn)
    {field} +var team1_spawn = get_node(team1_spawn)
    {field} +var team2_spawn = get_node(team2_spawn)
    +var team_spawn := [ null, team1_spawn, team2_spawn ]
    {field} +var players_root = get_node(players_root)
    {field} +var wave_spawn_timer := Timer.new()
    {field} +var individual_minion_spawn_timer := Timer.new()
    +var sec_between_waves := 30
    +var melee_minion_prefab: PackedScene
    +var caster_minion_prefab: PackedScene
    {field} +var top_line = get_node(top_line) as Line2D
    {field} +var top_line_reverse := duplicate_and_reverse_line(top_line)
    {field} +var mid_line = get_node(mid_line) as Line2D
    {field} +var mid_line_reverse := duplicate_and_reverse_line(mid_line)
    {field} +var bot_line = get_node(bot_line) as Line2D
    {field} +var bot_line_reverse := duplicate_and_reverse_line(bot_line)
    +var lines_left_to_spawn := 0
    +var minions_in_wave := 6
    -func _ready()
    +func on_Game_spawn(team_choices)
    +func spawn_champions(team_choices)
    +func begin_spawning_minion_waves()
    +func duplicate_and_reverse_line(line: Line2D) -> Line2D
    +func spawn_minion_wave()
    +func spawn_minions_on_lane(line, reverse_line)
    +func spawn_minion(line, team, prefab)
}

class Moving {
    +const DISTANCE_DELTA := 35 
    +var move_speed = 330
    {field} +var body = get_node(body) as RigidBody2D
    +var navmesh: Navigation2D = $"/root/Control/Map/Navigation2D" 
    +var path: PoolVector2Array
    +var collision: KinematicCollision2D
    +var shifting_frames := 0
    +var last_collision
    +var prev_pos := global_position
    {abstract} -func _ready()
    {abstract} +func set_target(to)
    +func on_target_moved(which)
    +func get_target_position()
    +func recalculate_path()
    +func perpendicular(vec: Vector2) -> Vector2
    +func is_left(A: Vector2, B: Vector2) -> bool
    +func get_collisions() -> Array
    -func _integrate_forces(state: Physics2DDirectBodyState)
    {abstract} -func _physics_process(_delta)
}

class Damagable {
    +const SIZE_MULTIPLIER := 1.0
    +var invulnerable := false
    +var untargetable := false
    +var health_max = 526
    +var health = health_max
    +var health_regen = 5.5
    +var armor = 20.88
    +var mr = 30
    +var gameplay_radius: float
    {abstract} -func _ready()
    +func calc_damage(resist)
    +func take_damage(from, true_d, magic_d, physic_d)
    {abstract} +func killed_by(killer)
    {abstract} +func damaged_by(killer)
    -func _process(delta)
    {abstract} +func fully_restored()
}

class AvatarOwner {
    +var avatar_prefab
    +var avatar
    +var spawned_on_team_computers := [ true, false, false ]
    {abstract} -func _ready()
    +func spawn_avatar_remotely_id(id, initials)
    +func sync_opponent(opponent_team)
    +func unsync_opponent(opponent_team)
    +func sync_set(key, value, only_for_teammates := false)
    +func sync_set_unreliable(key, value, only_for_teammates := false)
}

class VisionArea {
    -func _ready()
    +func on_area_entered(area: Area2D)
    +func on_area_exited(area: Area2D)
}

class Avatar {
    +var avatar_owner
    {abstract} +func pack(for_own_team: bool)
    {abstract} +func unpack(dict)
    {abstract} +func pack_initials(for_own_team: bool)
    {abstract} +func init(initials)
    +func sync_opponent(opponent_team)
    +func unsync_opponent(opponent_team)
    +func sync_set(key, value, only_for_teammates := false)
    +func sync_set_unreliable(key, value, only_for_teammates := false)
    {abstract} +func destroy()
}

class Autoattacking {
    +var acquisition_radius
    +var damage: float
    +var attack_speed: float
    +var bullet_prefab: PackedScene
    +var attack_range := 550.0
    +var target = null
    +var target_locked := false
    +var target_score: float
    +var target_in_range := false
    +var reload_timer: Timer
    +var ready_to_fire := true
    +var acquisition_area
    {abstract} -func _ready()
    +func check_if_target_in_attack_range()
    +func strict_equality(a, b)
    {abstract} +func set_target(to)
    {abstract} +func on_autoacquisition_area_entered(area)
    {abstract} +func on_autoacquisition_area_exited(area: Area2D)
    {abstract} +func on_enemy_hit_smth(what, who)
    {abstract} +func on_target_moved(which)
    {abstract} +func on_target_killed_by(killer)
    {abstract} +func try_to_find_target_in_area(search_area)
    {abstract} +func calc_priority(candidate: Node2D, victim = null)
    {abstract} +func killed_by(killer)
    +func on_ready_to_fire()
    +func fire()
    +func fire_if_possible()
}

class Events {
    {static} +var selection_state = SelectionState.None
    {static} +var mouse_click_made := false
    {static} +var clicked_objects := []
    {static} +var click_pos: Vector2
    {static} +var ignore_ground := 0
    {static} +func is_left_mouse_keyup(event: InputEvent)
    {static} +func register_click(target)
    {static} -func _process(delta)
}
enum SelectionState {
     None
    Position
    Entity 
}

class LobbyUI_Page1_Login {
    -func _on_Enter_pressed()
    -func _on_Username_text_entered(new_text: String)
}

class LobbyUI_Page2_ConnectOrHostGame {
    {field} +var hostIP_field = get_node(hostIP_field)		 
    {field} +var game_name_field = get_node(game_name_field) 
    {field} +var team_size_field = get_node(team_size_field) 
    -func _ready()
    -func _on_Game_logged_in(username)
    -func _on_Connect_pressed()
    -func _on_Create_pressed()
}

class LobbyUI_Page3_JoinTeam {
    {field} +var game_name_label = get_node(game_name_label) 
    {field} +var map_size_type_label = get_node(map_size_type_label) 
    {field} +var team1_list = get_node(team1_list) 
    {field} +var team2_list = get_node(team2_list) 
    {field} +var spectators_list = get_node(spectators_list) 
    {field} +var no_spectators_label = spectators_list.get_node("NoSpectators") 
    {field} +var watch_button = get_node(watch_button) 
    {field} +var start_button = get_node(start_button) 
    +var player_template: Node
    +var team1_empty: Node
    +var team2_empty: Node
    +var spectators_list_indeces := []
    -func _ready()
    -func _on_Game_connected()
    +func add_player_to_list(player)
    +func remove_player_from_list(player)
    +func update_buttons()
    -func _on_Join_pressed(team)
    -func _on_Game_joined(player: Dictionary)
    -func _on_Game_switched(player_id: int, team_from, team_to)
    -func _on_Game_leaved(player: Dictionary)
    -func _on_Start_pressed()
}

class LobbyUI_Page4_SelectRunes {
    {field} +var left_player_list = get_node(left_player_list) 
    {field} +var right_player_list = get_node(right_player_list) 
    {field} +var lockin_button = get_node(lockin_button) 
    {field} +var runes_list = get_node(runes_list) 
    {field} +var player_only_stuff = get_node(player_only_stuff) 
    +var left_list_template
    +var right_list_template
    -func _ready()
    +func left_or_right(team)
    +func on_Game_started(my_team_choices)
    +func on_Runes_item_selected(idx: int)
    +func on_LockIn_pressed()
    +func on_Game_player_ready(id)
}

class Lobby {
    {static} +const SERVER_PORT := 10567 
    {static} +const SERVER_MAX_CLIENTS := 4095
    {static} +var username: String
    {static} +var local_client: Dictionary
    {static} +var last_used_runes_and_spells := [ Types.Rune.Sorcery, Types.Spell.Heal, Types.Spell.Flash
    {static} +var team_choices = { Types.Team.Team1: {}, Types.Team.Team2: {}, Types.Team.Spectators: {} }
    {static} +var my_team_choices
    {static} +var players_ready = 0
    {static} +const opposite_team := { Types.Team.Team1 : Types.Team.Team2, Types.Team.Team2 : Types.Team.Team1, Types.Team.Spectators: Types.Peer.Player }
    {static} -func _ready()
    {static} +func login(uname)
    {static} +func connect_to(server_ip: String)
    {static} +func host(game_name: String, team_size: int, map, type)
    {static} -func _on_network_peer_connected(id: int)
    {static} +func join(team)
    {static} +func start()
    {static} +func set_rune(rune)
    {static} +func set_spell(spell, right: bool)
    {static} +func set_ready()
}

class Game {
    {static} +var game_name: String
    {static} +var map
    {static} +var team_size: int
    {static} +var type
    {static} +var lists := {}
    {static} +var clients
    {static} +var spectators
    {static} +var players
    {static} +var team1
    {static} +var team2
    {static} +var team1_and_spec
    {static} +var team2_and_spec
    {static} -func _enter_tree()
    {static} +func create_peer(id, team, username)
    {static} +func add_peer_to_lists(peer)
    {static} +func remove_peer_from_lists(id)
    {static} +func switch_peer_team(id, new_team)
    {static} +func copy_keys(to_dict: Dictionary, from_dict: Dictionary, keys: Array)
    {static} +func serialize_room_info()
    {static} +func deserialize_room_info(dict)
}

class LobbyUI_PageSwitcher {
    +var steps := []
    +var children: Array
    -func _ready()
    +func enable_step(num: int)
}

class Types {
    {static} +const map2str = { Map.SummonersRift: "Summoner's rift", Map.HowlingAbyss: "Howling abyss" }
    {static} +const type2str = { Type.BlindPick: "blind pick", Type.DraftPick: "draft pick" }
    {static} +const rune2str = { Rune.Inspiration: "Inspiration", Rune.Precision: "Precision", Rune.Domination: "Domination", Rune.Resolve: "Resolve", Rune.Sorcery: "Sorcery" }
    {static} +const champ2str = { Champion.Godotte: "Godotte" }
    {static} +const team2vision_layers = { Team.Team1: 2, Team.Team2: 4, Team.Spectators: 2 + 4 }
    {static} +const team2gameplay_layers = { Team.Team1: 8, Team.Team2: 16, Team.Spectators: 8 + 16 }
}
enum Peer {
     Spectator
    Team1
    Team2
    Player
    Client
    Team1_and_Spectators
    Team2_and_Spectators 
}
enum Team {
     Spectators
    Team1
    Team2 
}
enum Map {
     SummonersRift
    HowlingAbyss 
}
enum Type {
     BlindPick
    DraftPick  
}
enum Spell {
     Heal
    Ghost
    Barrier
    Exhaust
    Mark
    Clarity
    Flash
    Teleport
    Smite
    Cleanse
    Ignite 
}
enum Rune {
     Inspiration
    Precision
    Domination
    Resolve
    Sorcery 
}
enum Champion {
     Godotte 
}

class Totem {
}

class TotemAvatar {
    +func pack_initials(for_own_team: bool)
    +func init(data)
}

class MeleeMinon {
    +var sleeping := true
    +var radio_silence := true
    +func is_class(name: String)
    -func _ready()
    +func on_autoacquisition_area_entered(area)
    +func on_autoacquisition_area_exited(area: Area2D)
    +func on_enemy_hit_smth(what, who)
    +func on_target_killed_by(killer)
    +func set_target(to)
    +func wake_up(_area = null)
    +func calc_priority(candidate, vicium = null)
}

class Minion {
    +var lane_line: Line2D
    +var vision_radius
    +var selected_as_target_by_num_of_minions := 0
    {abstract} +func is_class(name: String)
    {abstract} -func _ready()
    {abstract} +func set_target(to)
    {abstract} +func calc_priority(candidate: Node2D, victim = null)
}

class MinionAvatar {
    +func pack_initials(for_own_team: bool)
    +func init(data)
}

class BulletAvatar {
}

class Bullet {
    +const SIZE_MULTIPLIER := 1.0
    +var true_damage := 0
    +var magic_damage := 0
    +var physic_damage := 0
    +var speed := 1200
    +var sender: Node2D
    +var target: Node2D
    -func _ready()
    -func _process(delta)
}

class PlayerAvatar {
    +var owner_id
    +var player_info
    +var executed_on_the_opponents_computer := false
    +var final_position
    +const sec_to_server_time_mul := 1000000
    +const time_reserve := 0.1 * sec_to_server_time_mul
    +var positions := []
    +var time_offset: int
    +func pack(for_own_team: bool)
    -func _process(delta)
    +func pack_initials(for_own_team: bool)
    +func unpack(data)
    +func init(data)
    +func on_target_set(target)
    -func _input(event: InputEvent)
}

class Player {
    +var id
    +var totem_prefab: PackedScene
    +var vision_radius: float
    -func _ready()
    +func lock_target(to)
    +func spawn_totem(pos)
    +func killed_by(killer)
    +func calc_priority(candidate, victium=null)
    -func _physics_process(_delta)
}

class MonsterAvatar {
    +func pack_initials(for_own_team: bool)
    +func init(data)
}

class Monster {
    +var base_location := global_position
    +var patience := 6
    +var distance_traveled := 0.0
    +var patience_tick_timer: Timer
    -func _ready()
    +func damaged_by(damager)
    +func decrease_patience(amount)
    +func try_to_find_target_in_area(area)
    +func on_moved()
    +func head_home()
    +func on_damaging_target(_target)
}

class TurretAvatar {
    {field} +var turret = get_node(turret)
    +var tween: Tween
    +var target
    -func _ready()
    +func pack_initials(for_own_team: bool)
    +func init(data)
    +func head_to(to, time_to_fire)
    -func _process(delta)
}

class Turret {
    +var vision_radius
    {field} +var protects = get_node(protects) if protects else null 
    -func _ready()
    +func killed_by(killer)
    +func set_target(to)
    +func on_seen_by(entity)
    +func on_unseen_by(entity)
    +func calc_priority(candidate: Node2D, victim = null)
}

class InhibitorAvatar {
    +func pack_initials(for_own_team: bool)
    +func init(data)
}

class Inhibitor {
    +var protects
    -func _ready()
    +func killed_by(killer)
    +func fully_restored()
}

Control <|-- GameUI
Node <|-- AvatarSpawner
Node2D <|-- Hiding
Area2D <|-- Ground
Avatar <|-- SelectableAvatar
Camera2D <|-- CameraController
Node <|-- SpawnManager
Autoattacking <|-- Moving
AvatarOwner <|-- Damagable
Hiding <|-- AvatarOwner
Area2D <|-- VisionArea
Node2D <|-- Avatar
Damagable <|-- Autoattacking
Node2D <|-- Events
Panel <|-- LobbyUI_Page1_Login
TabContainer <|-- LobbyUI_Page2_ConnectOrHostGame
Panel <|-- LobbyUI_Page3_JoinTeam
Panel <|-- LobbyUI_Page4_SelectRunes
Node <|-- Lobby
Node <|-- Game
Node <|-- LobbyUI_PageSwitcher
Node <|-- Types
Damagable <|-- Totem
SelectableAvatar <|-- TotemAvatar
Minion <|-- MeleeMinon
Moving <|-- Minion
SelectableAvatar <|-- MinionAvatar
Avatar <|-- BulletAvatar
AvatarOwner <|-- Bullet
SelectableAvatar <|-- PlayerAvatar
Moving <|-- Player
SelectableAvatar <|-- MonsterAvatar
Moving <|-- Monster
SelectableAvatar <|-- TurretAvatar
Autoattacking <|-- Turret
SelectableAvatar <|-- InhibitorAvatar
Damagable <|-- Inhibitor
Events *-- SelectionState
Types *-- Peer
Types *-- Team
Types *-- Map
Types *-- Type
Types *-- Spell
Types *-- Rune
Types *-- Champion
@enduml
